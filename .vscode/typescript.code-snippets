{
  // Place your snippets for typescriptreact here. Each snippet is defined under a snippet name and has a prefix, body and
  // description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the
  // same ids are connected.
  // Example:
  // "Print to console": {
  // 	"prefix": "log",
  // 	"body": [
  // 		"console.log('$1');",
  // 		"$2"
  // 	],
  // 	"description": "Log output to console"
  // }
  "useState": {
    "prefix": "ush",
    "body": [
      "const [$1, set${1/(.*)/${1:/capitalize}/}] = useState($2)"
    ],
    "description": "React useState() hook"
  },
  "useEffect": {
    "prefix": "ueh",
    "body": [
      "useEffect(() => {}, []);$0"
    ],
    "description": "React useEffect() hook"
  },
  "useContext": {
    "prefix": "uch",
    "body": [
      "const $1 = useContext($2);$0"
    ],
    "description": "React useContext() hook"
  },
  "useCallback": {
    "prefix": "ucbh",
    "body": [
      "const ${1:memoizedCallback} = useCallback(() => {}, []);$0"
    ],
    "description": "React useCallback() hook"
  },
  "useMemo": {
    "prefix": "umh",
    "body": [
      "const ${1:memoizedValue} = useMemo(() => {}, []);$0"
    ],
    "description": "React useMemo() hook"
  },
  "useRef": {
    "prefix": "urh",
    "body": [
      "const $1 = useRef($2);$0"
    ],
    "description": "React useRef() hook"
  },
}